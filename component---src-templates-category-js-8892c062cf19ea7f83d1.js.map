{"version":3,"sources":["webpack:///./src/templates/category.js"],"names":["locales","config","siteMetadata","Categories","pageContext","data","useContext","LocalesContext","langKey","i18nData","i18n","find","el","posti18n","post","i18nAllCategories","allCategories","category","allMdx","edges","totalCount","categoryHeader","title","description","lang","pageId","template","id","className","data-text","map","node","slug","fields","frontmatter","key","to","defaultLangKey","pageQuery"],"mappings":"mHAAA,sIAOQA,EAPR,OAOoBC,EAAOC,aAAnBF,QAyEOG,UAvEI,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KAAW,EAElBC,qBAAWC,KAA7BC,EAFoC,EAEpCA,QACFC,EAHsC,EAE3BC,KACKC,MAAK,SAAAC,GAAE,OAAIA,EAAGJ,UAAYA,KAHJ,EAIiBC,aAJjB,EAIiBA,EAAUT,QAAzDa,EAJ8B,EAIpCC,KAA+BC,EAJK,EAIpBC,cAEhBC,EAAab,EAAba,SANoC,EAOdZ,EAAKa,OAA3BC,EAPoC,EAOpCA,MAAOC,EAP6B,EAO7BA,WACTC,EAAoBD,EAAN,IAAoBP,GACvB,IAAfO,EAAmB,GAAK,KAG1B,OACE,oCACA,kBAAC,IAAD,CACAE,MAAOL,EACPM,YAAaF,EACbG,KAAMhB,EACNiB,OAAQR,EACRS,SAAS,cAGT,yBAAKC,GAAG,UAAUC,UAAU,aAC1B,yBAAKA,UAAU,aACb,wBAAIC,YAAWZ,GAAWA,GAC1B,4BAAKI,IAEP,yBAAKO,UAAU,WACb,wBAAIA,UAAU,YACXT,EAAMW,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACAV,EAAUS,EAAKG,YAAfZ,MACR,OACE,wBAAIa,IAAKH,GACP,kBAAC,OAAD,CAAMI,GAAIJ,GAAOV,SAM3B,2BAAOK,GAAG,WACR,kBAAC,OAAD,CAAMS,GAAK5B,IAAYR,EAAQqC,eAAiB,eAArC,IAA0D7B,EAA1D,eAAiFO,OAgD7F,IAAMuB,EAAS","file":"component---src-templates-category-js-8892c062cf19ea7f83d1.js","sourcesContent":["import React, { useContext } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link, graphql } from 'gatsby'\r\nimport { LocalesContext } from '../components/locales/LocalesContextProvider'\r\nimport SEO from '../components/seo'\r\nimport '../styles/blog-tags.css'\r\nimport config from'../../gatsby-config'\r\nconst { locales } = config.siteMetadata\r\n\r\nconst Categories = ({ pageContext, data }) => {\r\n\r\n  const { langKey, i18n } = useContext(LocalesContext)\r\n  const i18nData = i18n.find(el => el.langKey === langKey)\r\n  const { post: posti18n, allCategories: i18nAllCategories } = i18nData?.locales\r\n\r\n  const { category } = pageContext\r\n  const { edges, totalCount } = data.allMdx\r\n  const categoryHeader = `${totalCount} ${posti18n}${\r\n    totalCount === 1 ? \"\" : \"s\"\r\n  }`\r\n\r\n  return (\r\n    <>\r\n    <SEO\r\n    title={category}\r\n    description={categoryHeader}\r\n    lang={langKey}\r\n    pageId={category}\r\n    template='page tags'\r\n  />\r\n\r\n    <div id=\"content\" className=\"container\">\r\n      <div className=\"pageTitle\">\r\n        <h1 data-text={category}>{category}</h1>\r\n        <h2>{categoryHeader}</h2>\r\n      </div>\r\n      <div className=\"content\">\r\n        <ul className=\"taxonomy\">\r\n          {edges.map(({ node }) => {\r\n            const { slug } = node.fields\r\n            const { title } = node.frontmatter\r\n            return (\r\n              <li key={slug}>\r\n                <Link to={slug}>{title}</Link>\r\n              </li>\r\n            )\r\n          })}\r\n        </ul>\r\n      </div>\r\n      <aside id=\"sidebar\">\r\n        <Link to={ langKey === locales.defaultLangKey ? '/categories/' : `/${langKey}/categories`}>{i18nAllCategories}</Link>\r\n      </aside>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nCategories.propTypes = {\r\n  pageContext: PropTypes.shape({\r\n    category: PropTypes.string.isRequired,\r\n  }),\r\n  data: PropTypes.shape({\r\n    allMdx: PropTypes.shape({\r\n      totalCount: PropTypes.number.isRequired,\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.shape({\r\n              title: PropTypes.string.isRequired,\r\n            }),\r\n            fields: PropTypes.shape({\r\n              slug: PropTypes.string.isRequired,\r\n            }),\r\n          }),\r\n        }).isRequired\r\n      ),\r\n    }),\r\n  }),\r\n}\r\n\r\nexport default Categories\r\n\r\n/**\r\n * Get all categories for current page language.\r\n * \r\n * GRAPHQL:\r\n * \r\n * allMdx(\r\n *  limit: 2000,\r\n *  sort: {fields: [frontmatter___date], order: DESC},\r\n *  filter: {\r\n *    frontmatter: {category: {in: [$category]}},\r\n *    fields: {langKey: {eq: $langKey}}\r\n *  }\r\n * ) {\r\n * ...\r\n * }\r\n */\r\nexport const pageQuery = graphql`\r\n  query($category: String, $langKey: String) {\r\n    allMdx(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC },\r\n      filter: { \r\n        frontmatter: {category: {in: [$category]}},\r\n        fields: {langKey: {in: [$langKey]}}\r\n      }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n            langKey\r\n          }\r\n          frontmatter {\r\n            title\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`"],"sourceRoot":""}